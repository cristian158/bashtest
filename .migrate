#!/usr/bin/env bash


##############
## MIGRATION
#

## Script to migrate home git bare repository to new system
#

echo :: STARTING MIGRATION
sleep 1

## Commit alias config to .bashrc
echo :: Committing alias config to .bashrc and .zshrc
echo "alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'" >> $HOME/.bashrc
sleep 1

## Source repository to ignore the folder where to clone
echo :: Source repository to ignore the folder where to clone
echo ".cfg" >> .gitignore
sleep 1

## Clone dotfiles into bare repository @ home
echo :: Cloning dotdiles into bare repository @ home
git clone --bare https://github.com/cristian158/spweedy $HOME/.cfg
sleep 1 

## Define alias in current shell scope
echo :: Defining alias in current shell scope
alias config='/usr/bin/git --git-dir=#HOME/.cfg/ --work-tree=$HOME'
sleep 1

## Checkout actual content from the bare repository to home
echo :: Sourcing bashrc and checkout actual content from the bare repository to home after sourcing files
source ~/.bashrc
config checkout

### If previous step fails with untracked working tree files might be because
### home folder has stock config files which would be overwritten by Git
### One solution: back up with
# mkdir -p .config-backup && \
# config checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | \
# xargs -I{} mv {} .config-backup/{}
#
### Another solution: delete conflicting files
#
read -p ":: Which files wanna delete? " AnS
echo :: Deleting $Ans
rm $Ans

### rerun checkout
config checkout
sleep 1

echo :: Set flag for untracked files
config config --local status.showUntrackedFiles no


echo :: byyyyyy
