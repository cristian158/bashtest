#!/usr/bin/env bash


##############
## MIGRATION
#
#	Original article: https://www.atlassian.com/git/tutorials/dotfiles
#	DT's Git Bare Repo - A Better Way to Manage Dotfiles

## Script to migrate home git bare repository to new system
#

echo :: STARTING MIGRATION
sleep 1

## Making sure alias is commited to bashrc/zashrc 
#echo "alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'" >> $HOME/.bashrc

## Source repository to ignore the folder where to clone
#echo ".cfg" >> .gitignore

## Clone dotfiles into bare repository @ home
echo :: Cloning dotfiles into bare repository @ home
git clone --bare https://github.com/cristian158/spweedy $HOME/.cfg
sleep 1 
## add when pertinent
# if [ -e ~/.cfg ]; then echo 'dotfiles cloned into .cfg'; else echo 'something happen maybe'; fi

## Define alias in current shell scope
#alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
#sleep 1

## Checkout actual content from the bare repository to home
#echo :: Sourcing bashrc and checkout actual content from the bare repository to home after sourcing files
#source ~/.bashrc
config checkout

### If previous step fails with untracked working tree files might be because
### home folder has stock config files which would be overwritten by Git
### One solution: back up with
# mkdir -p .config-backup && \
# config checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | \
# xargs -I{} mv {} .config-backup/{}
#
### Another solution: delete conflicting files
#
#read -p ":: Which files wanna delete? " AnS
#echo :: Deleting $Ans
#rm $Ans

### rerun checkout
config checkout
sleep 1

echo :: Set flag for untracked files
config config --local status.showUntrackedFiles no


echo :: byyyyyy

########################
## I think first push has to be: 
## 	$ config push --set-upstream origin master
## 
## the second push went without token
## there's a workaround to this with ssh
